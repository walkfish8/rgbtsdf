CMAKE_MINIMUM_REQUIRED (VERSION 3.2...3.10)
PROJECT (RGBTSDF LANGUAGES C CXX VERSION 1.2.0)
INCLUDE (CheckLanguage)

# https://discourse.cmake.org/t/imported-projects-dont-resolve-include-paths-in-intellisense/9185
UNSET (CMAKE_INCLUDE_SYSTEM_FLAG_CXX)
UNSET (_CMAKE_INCLUDE_SYSTEM_FLAG_CXX_WARNING)

# support cpp11
SET (CMAKE_CXX_STANDARD 11)
# output library with postfix 'd'
# SET (CMAKE_DEBUG_POSTFIX d)
# organized the folders 
SET_PROPERTY (GLOBAL PROPERTY USE_FOLDERS ON)
# config the output path of build
SET (CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin")
SET (CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib")
SET (CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib")
# write .gitignore to CMAKE_BINARY_DIR
FILE (WRITE ${CMAKE_BINARY_DIR}/.gitignore "*")
INSTALL (FILES ${CMAKE_BINARY_DIR}/.gitignore DESTINATION ${CMAKE_INSTALL_PREFIX})
# Find dependencies:
SET (CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR})
# set the install path for library.
IF (CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  SET (CMAKE_INSTALL_PREFIX "${PROJECT_SOURCE_DIR}/install" CACHE PATH "..." FORCE)
ENDIF (CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)

# With SSE3 Accelerate Option
OPTION (WITH_SSE "Accelerate Program With SSE or Avx." OFF)

# Using OpenMP
OPTION(WITH_OPENMP "Accelerate Program With OpenMP." ON)
IF (WITH_OPENMP)
  # Find OpenMP
  FIND_PACKAGE (OpenMP QUIET)
  IF (OPENMP_FOUND)
    SET (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    SET (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
    MESSAGE (STATUS "Found OpenMP : ${OpenMP_CXX_FLAGS}${OpenMP_EXE_LINKER_FLAGS}")
  ELSE (OPENMP_FOUND)
    MESSAGE (STATUS "OPENMP NOT FOUND. DISABLE WITH_OPENMP OPTION.")
    SET (WITH_OPENMP OFF CACHE BOOL "Accelerate Program With OpenMP." FORCE)
  ENDIF (OPENMP_FOUND)
ENDIF (WITH_OPENMP)

# Find Eigen
FIND_PACKAGE (Eigen3 3.2 REQUIRED NO_MODULE)
IF (EIGEN3_FOUND)
  MESSAGE (STATUS "Found Eigen Version: ${Eigen3_VERSION}, ${EIGEN3_INCLUDE_DIRS}.")
ENDIF (EIGEN3_FOUND)

# Find OpenCV Modules
OPTION (OpenCV_STATIC "Use OpenCV static libs." OFF)
FIND_PACKAGE (OpenCV QUIET COMPONENTS core calib3d imgproc imgcodecs flann features2d)
IF (OpenCV_FOUND)
  ADD_LIBRARY (opencv INTERFACE IMPORTED)
  SET_TARGET_PROPERTIES (opencv PROPERTIES 
   	INTERFACE_INCLUDE_DIRECTORIES "${OpenCV_INCLUDE_DIRS}"
   	INTERFACE_LINK_LIBRARIES "${OpenCV_LIBS}")
  TARGET_COMPILE_DEFINITIONS (opencv PUBLIC ${OpenCV_DEFINITIONS})
ELSE (OpenCV_FOUND)
  MESSAGE (STATUS "Failed to find OpenCV. Please specify OpenCV directory using OpenCV_DIR variable.")
ENDIF (OpenCV_FOUND)

SET (DEMO_NAME example) 
ADD_EXECUTABLE (${DEMO_NAME} example.cpp)
TARGET_LINK_LIBRARIES (${DEMO_NAME} PRIVATE opencv Eigen3::Eigen)
# Copy depend dlls of OpenCV to binary directory.
FOREACH (NAME  ${OpenCV_LIBS})
  ADD_CUSTOM_COMMAND (TARGET ${DEMO_NAME} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different $<TARGET_FILE:${NAME}> $<TARGET_FILE_DIR:${DEMO_NAME}>)
ENDFOREACH (NAME  ${OpenCV_LIBS})
TARGET_COMPILE_DEFINITIONS (${DEMO_NAME} PRIVATE "$<$<BOOL:${WITH_OPENMP}>:${PROJECT_UPPER_NAME}_USE_OMP=1>")
TARGET_COMPILE_DEFINITIONS (${DEMO_NAME} PRIVATE "$<$<BOOL:${EIGEN3_FOUND}>:${PROJECT_UPPER_NAME}_USE_EIGEN=1>")